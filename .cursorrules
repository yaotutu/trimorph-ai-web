# 项目详情
- **框架**：Vue.js 3
- **语言**：TypeScript
- **包管理器**：pnpm
- **构建工具**：Vite
- **状态管理**：Pinia
- **路由**：Vue Router
- **UI 组件库**：Headless UI, Element Plus
- **样式**：Tailwind CSS
- **辅助工具**：VueUse, Vite 插件（优化构建）

# 代码风格与结构
- 采用 **函数式编程**，尽量避免使用类（class）。
- 代码保持简洁、模块化，使用 TypeScript **接口（interface）** 进行类型定义。
- 组件逻辑使用 Vue **组合式 API（Composition API）**，并采用 `script setup` 语法。
- **组件文件命名**：PascalCase（大驼峰）。
- **变量、函数命名**：camelCase（小驼峰）。

# 目录与文件命名规范
- 目录名称使用 **kebab-case**（短横线小写）。
- **模块文件** 统一使用 **具名导出（named export）**。
- 启用 TypeScript **严格模式（strict mode）**，确保类型安全。

# 依赖管理
- **安装新库前需确认**，避免无序引入依赖。
  - **注意**：在引入第三方库前，请先与项目负责人或相关团队成员讨论。
- **优先使用 Element Plus** 组件库开发 UI 组件。
- 利用 pnpm **workspace** 特性，提高依赖管理效率。

# 编码模式与最佳实践
- **异步处理**：
  - 使用 `async/await` 处理异步操作。
  - 所有 `await` 操作应封装在 `try/catch` 语句中，确保错误可控。
- **代码拆分**：
  - 采用 Vite **动态导入（dynamic import）**，优化加载时间。
  - 按需加载组件，避免一次性加载过多代码。

# 样式与 UI 规范
- **采用 Tailwind CSS** 进行样式管理。
- **移动优先**（Mobile-first）设计，保证响应式布局。
- UI 组件优先使用 **Element Plus**，确保样式一致性。

# 性能优化
- **图片优化**：
  - 采用 **WebP** 格式，减少资源体积。
  - 启用 **懒加载（lazy loading）**，提升页面加载速度。
- **构建优化**：
  - 使用 Vite 插件自动处理 **SVG**，减少 HTTP 请求。
  - 利用 **代码分割**，避免主包过大影响加载。

# 代码质量保证
- **代码格式化**：使用 **ESLint + Prettier** 统一代码风格。
- **类型检查**：所有 TypeScript 代码必须符合 `strict mode` 规范。

# Moonraker API 交互（3D 打印机管理）
## Moonraker API 介绍
**Moonraker** 提供 RESTful API 和 WebSocket API，用于访问 **Klipper** 固件，实现 3D 打印机的管理和监控。

官方文档：https://moonraker.readthedocs.io/en/latest/

## API 交互方式
### 1. **HTTP API（一次性请求）**
用于请求单次数据，例如：
- `GET /printer/info` 获取打印机信息。
- `GET /server/files/list` 获取 G-code 文件列表。
- `POST /printer/gcode/script` 发送 G-code 指令。
- `POST /server/files/upload` 上传 G-code 文件。

### 2. **WebSocket API（实时数据监听）**
用于监听实时状态变化，例如：
- 订阅 `printer.objects.subscribe` 以监听打印机状态（`print_stats`）。
- 监听 `server.temperature_store` 以获取实时温度数据。

## API 交互实现
### HTTP 请求
```typescript
async function fetchPrinterInfo() {
    try {
        const response = await fetch("http://your-moonraker-ip/printer/info");
        if (!response.ok) throw new Error("请求失败");
        return await response.json();
    } catch (error) {
        console.error("获取打印机信息失败:", error);
        return null;
    }
}
```

### WebSocket 监听
```typescript
const socket = new WebSocket("ws://your-moonraker-ip/websocket");

socket.addEventListener("open", () => {
    console.log("WebSocket 连接成功！");
    socket.send(
        JSON.stringify({
            method: "printer.objects.subscribe",
            params: { objects: { print_stats: null } },
        })
    );
});

socket.addEventListener("message", (event) => {
    const data = JSON.parse(event.data);
    console.log("收到打印机状态更新:", data);
});
```



